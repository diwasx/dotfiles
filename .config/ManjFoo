#customization
kwin_x11
/etc/issue
xprop -->get class
xev   -->get keyboard class
screenkey -->show key pressed
feh --bg-scale <wallpaper>
archey      //logo
@grub
https://wiki.archlinux.org/index.php/GRUB/Tips_and_tricks#Background_image_and_bitmap_fonts
GRUB_THEME="/usr/share/grub/themes/starfield/theme.txt" -->Read theme.txt file for background
grub-mkconfig -->generate 

#apache
vim /etc/httpd/conf/extra/httpd-vhosts.conf --> virtualhost
vim /etc/hosts --> For dns port to 127.0.0.1

#sql
firewall-cmd --add-port=3306/tcp 
firewall-cmd --permanent --add-port=3306/tcp
GRANT ALL PRIVILEGES ON *.* TO 'root'@'192.168.%' IDENTIFIED BY '' WITH GRANT OPTION;
describe <table> --> give table scheme
mysql -u -h 192.168.* -p
mycli --> auto syntax and highlighting

#bash #zsh
ctrl w --> bash bs word
alt d  --> bash del word
ctrl+h //backspace 
\r to make enter in bash
ctrl y -->undo
<ctrl-r> -->reverse search (press multiple time to cycle)

#system
systemctl --user import-environment DISPLAY
journalctl -xe --> Check for errors
systemctl | grep running
lsblk --> show disk partation and mount point
df -h --> disk usage
ps -u <user> -->processes in user
ps acux -->a for terminal process,x for non terminal process, u for username, c for actual command name like(ls,grep,cat)
nmap -sP 192.168.1.* //scan all ip
nmap localhost -->scan port
du -sh -->folder size
du -hs * | sort -h
cat /etc/resolv.conf  -->dns location
grep -rnw '/path/to/somewhere/' -e 'pattern'  --->find text from files
ln -s <new path> <new shortcut>
udisksctl mount -b /dev/sdc1 --> mount as user
load-module module-native-protocol-tcp auth-ip-acl=127.0.0.1 
dd if=/path_to_iso_without_space.iso of=/dev/sdb
dd bs=4M if=/path/to/archlinux.iso of=/dev/sdx status=progress oflag=sync
mkfs.ntfs -->Format 
mkfs.ntfs -f -->Quick format
mkfs.ext4

#clipboard
xsel -p -->paste primary clipboard (mid mouse button)
xsel -b -->paste secondary clipboard (keyboard paste button)
xsel -ip -->copy to primary clipboard 
xsel -ib -->copy to secondary clipboard 
echo pacman -Syu | xsel -ib --> this copies command to clipboard

#git
git config --global user.email <email addr>
git remote add origin <link> --> (here origin is the name for remote repo)
git push origin master
git push origin1 master:testing -->(testing is origin1 branch to push in)
git push origin --all -->pushes all local branches to origin
//config gitpage mai lekhcha 
git show            -->Chages between latest two commit
git diff --cached   -->Chages between last commit and staged file
git rm -r --cached . -->clear cached and all new file can be added (usefull when adding folder/file to gitignore)
git checkout -b <branchname>   -->create new branch and switch to it

#pacman
pacman -Scc -->clear cache
yaourt -Syu --aur --> check for aur update

#bumblebee
vblank_mode=0 optirun glxgears
vblank_mode=0 primusrun %command%
--for steam--csgo and dota---
LD_PRELOAD=/usLD_PRELOAD=/usr/lib/nvidia/libGL.so optirun %command%r/lib/nvidia/libGL.so optirun %command%
optirun -b none nvidia-settings -c :8

#vim

Shift+<< - shift current line left
Shift+>> - shift current line right
:noh //no highlighting
w-e,b-ge   0,$
alt+ctrl+m
nnoremap :-normal mode map
inoremap :-insert mode map
:wa save all buffer

@html
dat ->delete around tags
dit ->delete inside tags

@add word to beggining
Use Ctrl+V to enter visual block mode
Move Up/Downto select the columns of text in the lines you want to comment.
Then hit Shift+i and type the text you want to insert.
Then hit Esc, wait 1 second and the inserted text will appear on every line.

@windows
vim -p (with tabs)
vim -o -O verti/horizontally
ctrl-w
s //split verti
w //split hori
:new //split hori with new file
:vnew //split verti with new file
T //window to tab
:all //make one window for all files including tabs
Shift+j -->clear white space

@youcompleteme (ycm) --> use ~/.vim/bundle/YouCompleteMe/install.py   <additional parameter>

#vscode
dotnet new console
dotnet run

#python
repr        #convert to string
input       #take input,input is always as a string
python -m site  -->show lib folder #.local/lib/
pip install --user <package>    -->install as user

@Run python from node
https://stackoverflow.com/questions/23450534/how-to-call-a-python-function-from-node-js

#nodejs 
npm init -->initialize app
npm install/unistall/remove/rm <package> -->install in current folder
npm install <package> --save -->install in current folder and add to package.json (--save NO LONGER NECESSARY)
npm install <package> -g -->install globally(/usr/lib/node_modules)
(can be changed to ~/node_modules using npm_config_prefix)(link:https://wiki.archlinux.org/index.php/Node.js#Allow_user-wide_installations)
npm install <package> --save-dev -->install as dev
npm install --> install all dependencies
npm install --production --> install dependencies without dev
npm list  -->show all dependencies
npm list --depth <value>  -->show all dependencies and depth

nodemon -->check for change in node app and reload auto
live-server  -->host project in brower

#php #laravel
php artisan make:model <name> --> create model
php artisan make:model <name> -m  --> create model with migration
php artisan make:auth --> create auth that require model
php artisan make:migration create_users_table --> create migrition
php artisan migrate --> migrate data
php artisan migrate:reset --> rollback migrate 
#composer
composer require <package> -->install package in project dir
composer global require laravel/installer -->install laravel globally
composer install -->Install all packages from json file

#java
<projectDescription>
    <name>PROJECTNAME</name>
</projectDescription>

:ProjectCreate . -n java
make files in scr folder

#i3
xmodmap     //keys
xprop       //detail about window

#OpenVPN
sudo openvpn <.ovpm file>


#mouse
vim ~/.imwheelrc  #for mouse scroll speed

#ranger
rifle.conf -->/usr/lib/python3.7/site-packages/ranger/config/ (Set File associate)


#rofi
Ctrl-space --> autocomplete
Shift-del --> clear command


#scripting  
>  :- overwrite
>> :- append
$? :- exit status of last command. 0 if successfull, 1 if failed
output=`ls` or  output="$(ls)" :- save output of command to variable
url=`xsel -b | head -n 1` --> piping command is stored in varaible like this
grep -e <patter> -->to check if pattern is present
grep -v <patter> -->to check if pattern is not present (return true when pattern is not found)

#mps-youtube(mpsyt)
x :- <number> copy to clipboard
q :- finds for similar song 
< > :-for next and previous
@playing by upload of channel
mpsyt channels <name>; set order date; set order to relevence

#image 
convert example.png -resize 2560x1440 example.png --> change resolution
convert example.png example.jpg --> one format to another

@sxiv -->image viewer
b -> fullscreen


xx (reddit,discord)

